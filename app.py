from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
import os
import asyncio
from googletrans import Translator
from langdetect import detect
from unidecode import unidecode

app = Flask(__name__)

def traducir_texto(texto, idioma_destino):
    """Traduce el texto al idioma deseado de forma s√≠ncrona."""
    traductor = Translator()
    traduccion = traductor.translate(texto, dest=idioma_destino)
    return traduccion.text  # Asegura que devuelve el texto directamente

# Funci√≥n para detectar el idioma
def detectar_idioma(texto):
    try:
        return detect(texto)
    except:
        return "es"  # Si hay error, por defecto espa√±ol

# Normalizar texto (min√∫sculas y sin acentos)
def normalizar_texto(texto):
    return unidecode(texto.lower())

# Funci√≥n para dividir mensajes largos
def enviar_respuesta(resp, mensaje):
    """Divide y env√≠a mensajes largos para evitar el l√≠mite de Twilio."""
    limite = 1500  # M√°ximo seguro antes de 1600 caracteres
    partes = [mensaje[i:i+limite] for i in range(0, len(mensaje), limite)]
    for parte in partes:
        resp.message(str(parte))  # Env√≠a cada parte como mensaje separado

# Mensajes predefinidos
RESPUESTAS = {
    ("hola", "buenas" "buenos d√≠as", "buenas tardes", "buenas noches"): "¬°Hola! Bienvenido a Spinzone Indoor Cycling üö¥‚Äç‚ôÇÔ∏è. ¬øEn qu√© puedo ayudarte?",
    "horarios": """**Nuestros horarios son:**

    **Cycling:**
    Lunes a Jueves: 9am, 6:30pm y 7pm.
    Viernes: 9am y 7:30pm.
    Sabados y Domingos: 10am.

    **Clases Funcionales:**
    Lunes a Jueves: 10am y 5:30pm.
    Viernes: 10am. üìÖ""",
    "**D√≥nde estan ubicados o ubicacion?**": "Estamos ubicados en 2175 Davenport Blvd Davenport Fl 33837. üìç",
    "**numero de contacto o telefono**": "Puedes llamarnos al +8633171646 o escribirnos por WhatsApp. üìû",
    "**C√≥mo reservar una clase o clase gratis o quiero registrarme?**": "Puedes agendar tu clase f√°cilmente registrandote a trav√©s de nuestro sitio web  https://app.glofox.com/portal/#/branch/6499ecc2ba29ef91ae07e461/classes-day-view o enviarnos:\nNombre.\nApellido.\nFecha de Nacimiento.\nNumero de Telefono\nEmail\nal WhatsApp +18633171646.",
    "**precios o membresias**": """Te comparto nuestra lista de precios:

    **Primera clase GRATIS**
    4 Clases: $49.99
    8 clases $79.99
    12 clases $99.99
    16 clases $129.99

    **Paquete ilimitados:** 
    Solo Cycling o Funcionales $159.99 por mes o $139.99 por mes en autopay por 3 meses
    Cycling+Funcionales: $175.99 por mes o $155.99 por mes en autopay por 3 meses.""",
    "informacion":[ 
        "Gracias por tu inter√©s en Spinzone Indoorcycling. Somos mucho m√°s que una clase de spinning, ofrecemos una experiencia √∫nica que combina intensidad, m√∫sica envolvente y motivaci√≥n sin l√≠mites.\n", 
        
        "**¬øQu√© es el Indoor Cycling?**\nEl indoor cycling es un entrenamiento cardiovascular de alta energ√≠a que se realiza en bicicletas est√°ticas con resistencia ajustable. Nuestras clases est√°n guiadas por instructores expertos y acompa√±adas de m√∫sica motivadora, lo que te ayuda a mejorar tu resistencia, quemar calor√≠as y fortalecer piernas y gl√∫teos mientras disfrutas del ritmo y la energ√≠a del grupo.\n", 
        
        "**¬øQu√© son las Clases Funcionales?**\nAdem√°s del indoor cycling, ofrecemos clases funcionales, entrenamientos dise√±ados para trabajar todo el cuerpo con ejercicios que mejoran la fuerza, resistencia y coordinaci√≥n. Utilizamos una combinaci√≥n de peso corporal, bandas, mancuernas y otros elementos para garantizar un entrenamiento completo y efectivo.\n", 
        
        "**¬øPor qu√© elegir Spinzone?**\nClases din√°micas para todos los niveles.\nEntrenamiento guiado por instructores certificados.\nAmbiente motivador con m√∫sica y energ√≠a inigualables.\nEquipos de √∫ltima tecnolog√≠a para un rendimiento √≥ptimo.\n", 
        
        "Si tienes alguna otra pregunta, estar√© encantado de ayudarte.\n¬°Esperamos verte pronto pedaleando y entrenando con nosotros!",
    ],
    ("no me deja seleccionar numero de bicicleta", "bici", "spot"):
    "üõ† **Soluci√≥n para seleccionar n√∫mero de bicicleta**\n"  
    "üîπ A veces, cuando es la primera reserva, el sistema asigna automaticamente una bicicleta.\n"  
    "\n"
    "üîπ **Cancelar la reserva o reserva actual:**\n"  
    "- Accede a nuestra App y ve a tus reservas.\n"  
    "- Selecciona la clase y cancela la reserva.\n\n"  
    "\n"
    "üîπ **Reserva nuevamente seleccionando la bicicleta:**\n"  
    "- Vuelve a la secci√≥n de clases.\n"  
    "- Selecciona la bicicleta disponible y confirma tu reserva.\n"  
    "\n"
    "üì≤ Si despu√©s de intentar estos pasos a√∫n tienes problemas, cont√°ctanos por WhatsApp al **+18633171646**."
}
# Definir RESPUESTAS_NORMALIZADAS antes de usarla
RESPUESTAS_NORMALIZADAS = {k: v for k, v in RESPUESTAS.items()}

@app.route("/webhook", methods=["POST"])
def whatsapp_reply():
    """Maneja los mensajes entrantes de WhatsApp de forma s√≠ncrona."""
    global RESPUESTAS_NORMALIZADAS
    incoming_msg = request.values.get("Body", "").strip()
    idioma_detectado = detectar_idioma(incoming_msg)
    incoming_msg = normalizar_texto(incoming_msg)

    resp = MessagingResponse()
    respuesta = RESPUESTAS_NORMALIZADAS.get(incoming_msg, "Lo siento, no entiendo tu mensaje.")
    respuesta = traducir_texto(respuesta, idioma_detectado)  # Traducci√≥n en modo s√≠ncrono

    # Normalizar claves del diccionario RESPUESTAS
    RESPUESTAS_NORMALIZADAS = {}
    for claves, valor in RESPUESTAS.items():
        if isinstance(claves, tuple):  # Si la clave es una tupla (varias palabras)
            for palabra in claves:
                RESPUESTAS_NORMALIZADAS[normalizar_texto(palabra)] = valor
        else:  # Si es una clave √∫nica
            RESPUESTAS_NORMALIZADAS[normalizar_texto(claves)] = valor

    # Buscar palabra clave en el mensaje
    respuesta = next((RESPUESTAS_NORMALIZADAS[key] for key in RESPUESTAS_NORMALIZADAS if key in incoming_msg), "Lo siento, no entiendo tu mensaje.")

    # Traducir la respuesta al idioma detectado
    respuesta = traducir_texto(respuesta, idioma_detectado)  # ‚úÖ Versi√≥n s√≠ncrona

    # Enviar la respuesta
    enviar_respuesta(resp, respuesta)

    print(f"üì© Respuesta enviada: {respuesta}")

    return str(resp)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=False)
